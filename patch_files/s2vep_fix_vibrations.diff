From 2bd71d44568c5348a210984c3f15e871123ba593 Mon Sep 17 00:00:00 2001
From: andixlm <andixev@gmail.com>
Date: Fri, 16 Jan 2015 18:19:04 +0500
Subject: [PATCH] galaxys2plus: drv2603: Fix vibration

* Initialize vibration from the driver.
* Disable timeout restrictions to fix haptic feedback.
* Add user controllable pwm level (vibration density).
* Clean up code.
---
 drivers/motor/ss_brcm_drv2603_haptic.c | 114 +++++++++++++++++++++------------
 1 file changed, 73 insertions(+), 41 deletions(-)

diff --git a/drivers/motor/ss_brcm_drv2603_haptic.c b/drivers/motor/ss_brcm_drv2603_haptic.c
index 4fc0c09..b811fdb 100644
--- a/drivers/motor/ss_brcm_drv2603_haptic.c
+++ b/drivers/motor/ss_brcm_drv2603_haptic.c
@@ -32,84 +32,102 @@
 
 #include "../staging/android/timed_output.h"
 
+#define GPIO_MOTOR_EN 189
+
 typedef struct
 {
-	struct pwm_device 	*pwm;
+	struct pwm_device *pwm;
 	struct timed_output_dev timed_dev;
 	struct timer_list vib_timer;
 	struct work_struct off_work;
 	struct regulator *vib_regulator;
 	const char *vib_vcc;
-	int (*gpio_en) (bool) ;
 	u16 pwm_duty;
 	u16 pwm_period;	
 	u16 pwm_polarity;	
 	int	pwm_started;
 	int	initialized;
-}t_vib_desc;
-
+}
+t_vib_desc;
 
 static t_vib_desc vib_desc;
-static int controlset(const char *name, unsigned int *value, int index);
+static unsigned long pwm_val=50;
 static void vibrator_control(t_vib_desc *vib_iter, unsigned char onoff);
 
-
-#define MIN_TIMEOUT 150
-#define MAX_TIMEOUT 500
-#define DEFAULT_TIMEOUT 170
-
-void vibtonz_en(bool en)
+void drv2603_en(bool en)
 {
 	t_vib_desc *vib_iter =&vib_desc;
 
 	printk("%s %s \n", __func__, (en?"enabled":"disabled"));
-	if( vib_iter->initialized == 0) return;
-	if(en)
+
+	if (vib_iter->initialized == 0) return;
+	if (en)
 	{
-		vib_iter->gpio_en(en);
+		gpio_direction_output(GPIO_MOTOR_EN, en);
 		pwm_start(vib_iter->pwm);
 	}
 	else
 	{
 		pwm_stop(vib_iter->pwm);
-		vib_iter->gpio_en(en);
+		gpio_direction_output(GPIO_MOTOR_EN, en);
 	}
 }
 
-EXPORT_SYMBOL(vibtonz_en);
-
-void vibtonz_pwm(int nForce)
+void drv2603_pwm(int nForce)
 {
-	static int prev_duty=0;
 	t_vib_desc *vib_iter =&vib_desc;
-	int pwm_period=0, pwm_duty = 0;
+
+	int pwm_period = 0, pwm_duty = 0;
 
 	printk("%s : %d \n", __func__, nForce);
-	if( vib_iter->initialized == 0) return;
+
+	if (vib_iter->initialized == 0) return;
 
 	pwm_period = vib_iter->pwm_period;
 	pwm_duty = pwm_period/2 + ((pwm_period/2 - 2) *nForce) /127;
 
-	if(pwm_duty > vib_iter->pwm_duty)
+	if (pwm_duty > vib_iter->pwm_duty)
 	{
 		pwm_duty = vib_iter->pwm_duty;
 	}
-	else if(pwm_period - pwm_duty > vib_iter->pwm_duty)
+	else if (pwm_period - pwm_duty > vib_iter->pwm_duty)
 	{
 		pwm_duty = pwm_period - vib_iter->pwm_duty;
 	}
 	
-	pwm_set_period_ns(vib_iter->pwm,vib_iter->pwm_period); 	
+	pwm_set_period_ns(vib_iter->pwm, vib_iter->pwm_period);
 	pwm_set_polarity(vib_iter->pwm, vib_iter->pwm_polarity);
 	pwm_set_duty_ns(vib_iter->pwm, pwm_duty); 
 }
 
-EXPORT_SYMBOL(vibtonz_pwm);
+static ssize_t pwm_value_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int count;
 
+	count = sprintf(buf, "%lu\n", pwm_val);
+	pr_debug("[VIB] pwm_value: %lu\n", pwm_val);
 
-static void vibrator_control(t_vib_desc *vib_iter, unsigned char onoff)
+	return count;
+}
+
+ssize_t pwm_value_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
 {
+	if (kstrtoul(buf, 0, &pwm_val))
+		pr_err("[VIB] %s: error on storing pwm_value\n", __func__);
 
+	pr_info("[VIB] %s: pwm_value=%lu\n", __func__, pwm_val);
+
+	return size;
+}
+
+static DEVICE_ATTR(pwm_value, S_IRUGO | S_IWUSR,
+		pwm_value_show, pwm_value_store);
+
+static void vibrator_control(t_vib_desc *vib_iter, unsigned char onoff)
+{
 #if 0
 	printk("%s : Vibrator %s\n", __func__, (onoff)?"on":"off");
 
@@ -128,15 +146,22 @@ static void vibrator_control(t_vib_desc *vib_iter, unsigned char onoff)
 		}
 	}
 #endif
+	if (onoff == 1)
+	{
+		drv2603_en(1);
+		drv2603_pwm(pwm_val);
+	}
+	else
+		drv2603_en(0);
+
 	return;
 }
 
 static void vibrator_enable_set_timeout(struct timed_output_dev *sdev, int timeout)
 {
 	t_vib_desc *vib_iter=container_of(sdev, t_vib_desc, timed_dev);
-	int valid_timeout;
 
-	if(timeout == 0)
+	if (timeout == 0)
 	{
 		vibrator_control(vib_iter, 0);
 		return;
@@ -144,10 +169,9 @@ static void vibrator_enable_set_timeout(struct timed_output_dev *sdev, int timeo
 
 	vibrator_control(vib_iter, 1);
 
-	valid_timeout=(timeout > MIN_TIMEOUT) ? timeout: DEFAULT_TIMEOUT;
-	printk(KERN_INFO "%s : Vibrator timeout = %d \n", __func__, valid_timeout);
+	printk(KERN_INFO "%s : Vibrator timeout = %d \n", __func__, timeout);
 
-	mod_timer(&vib_iter->vib_timer, jiffies + msecs_to_jiffies(valid_timeout));
+	mod_timer(&vib_iter->vib_timer, jiffies + msecs_to_jiffies(timeout));
 }
 
 static void vibrator_off_work_func(struct work_struct *work)
@@ -167,18 +191,20 @@ static void on_vibrate_timer_expired(unsigned long x)
 static void vibrator_get_remaining_time(struct timed_output_dev *sdev)
 {
 	t_vib_desc *vib_iter=container_of(sdev, t_vib_desc, timed_dev);
+
 	int retTime=jiffies_to_msecs(jiffies-vib_iter->vib_timer.expires);
+
 	printk(KERN_INFO "Vibrator : remaining time : %dms \n", retTime);
 }
 
-
 static int ss_brcm_haptic_probe(struct platform_device *pdev)
 {
-	struct platform_isa1000_vibrator_data *pdata = pdev->dev.platform_data;
 	t_vib_desc *vib_iter;
-	int ret=0;
 
-	printk("ss_brcm_haptic_probe \n"); 
+	int ret = 0;
+	struct platform_isa1000_vibrator_data *pdata = pdev->dev.platform_data;
+
+	printk("ss_brcm_haptic_probe \n");
 
 	/* vib_iter=kzalloc(sizeof(t_vib_desc), GFP_KERNEL);
 	   if(vib_iter == NULL)
@@ -186,6 +212,7 @@ static int ss_brcm_haptic_probe(struct platform_device *pdev)
 	   pr_err("%s : memory allocation failure \n", __func__);
 	   return -ENOMEM;
 	   } */
+
 	vib_iter=&vib_desc;
 #if 0
 	vib_iter->vib_vcc = (const char *)pdata->regulator_id;
@@ -200,47 +227,53 @@ static int ss_brcm_haptic_probe(struct platform_device *pdev)
 
 	regulator_enable(vib_iter->vib_regulator);
 #endif
-	vib_iter->gpio_en = pdata->gpio_en;
 	vib_iter->pwm = pwm_request(pdata->pwm_name, "vibrator");
 	if (IS_ERR(vib_iter->pwm)) 
 	{
 		pr_err("[VIB] Failed to request pwm.\n");
-		 return -EFAULT;
+		return -EFAULT;
 	}
+
 	vib_iter->pwm_duty = pdata->pwm_duty;
 	vib_iter->pwm_period = pdata->pwm_period_ns;
 	vib_iter->pwm_polarity = pdata->polarity;
 
-	pwm_set_polarity(vib_iter->pwm , vib_iter->pwm_polarity); 
+	pwm_set_polarity(vib_iter->pwm, vib_iter->pwm_polarity);
 
 	vib_iter->timed_dev.name="vibrator";
 	vib_iter->timed_dev.enable=vibrator_enable_set_timeout;
 	vib_iter->timed_dev.get_time=vibrator_get_remaining_time;
 
 	ret = timed_output_dev_register(&vib_iter->timed_dev);
-	if(ret < 0)
+	if (ret < 0)
 	{
 		printk(KERN_ERR "Vibrator: timed_output dev registration failure\n");
 		timed_output_dev_unregister(&vib_iter->timed_dev);
 	}
 
 	init_timer(&vib_iter->vib_timer);
+
 	vib_iter->vib_timer.function = on_vibrate_timer_expired;
 	vib_iter->vib_timer.data = (unsigned long)vib_iter;
 
 	platform_set_drvdata(pdev, vib_iter);
 
 	INIT_WORK(&vib_iter->off_work, vibrator_off_work_func);
+
+	/* User controllable pwm level */
+	ret = device_create_file(vib_iter->timed_dev.dev, &dev_attr_pwm_value);
+	if (ret < 0)
+		pr_err("[VIB] create sysfs fail: pwm_value\n");
 	
 	vib_iter->initialized = 1;
 	printk("%s : ss vibrator probe\n", __func__);
 	return 0;
-
 }
 
 static int __devexit ss_brcm_haptic_remove(struct platform_device *pdev)
 {
 	t_vib_desc *vib_iter = platform_get_drvdata(pdev);
+
 	timed_output_dev_unregister(&vib_iter->timed_dev);
 	//regulator_put(vib_iter->vib_regulator);
 	return 0;
@@ -271,4 +304,3 @@ module_exit(ss_brcm_haptic_exit);
 
 MODULE_DESCRIPTION("Samsung Vibrator driver");
 MODULE_LICENSE("GPL");
-
-- 
2.4.1

